import random
import string
def preprocess_text(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    return text
def build_markov_chain(words):
    markov_chain = {}
    for i in range(len(words) - 1):
        current_word = words[i]
        next_word = words[i + 1]
        if current_word not in markov_chain:
            markov_chain[current_word] = []
        markov_chain[current_word].append(next_word)
    return markov_chain
def generate_text(markov_chain, start_word, word_limit):
    current_word = start_word
    generated_words = [current_word]
    for _ in range(word_limit - 1):
        if current_word in markov_chain:
            next_word = random.choice(markov_chain[current_word])
            generated_words.append(next_word)
            current_word = next_word
        else:
            break
    return ' '.join(generated_words)
text_input = """
Artificial intelligence and natural language processing are changing the world.
This experiment demonstrates word generation using Markov Chains.
The generated text is based on probabilities of word sequences in the input text.
"""
processed_text = preprocess_text(text_input)
words = processed_text.split()
markov_chain = build_markov_chain(words)
start_word = random.choice(words)
generated_text = generate_text(markov_chain, start_word, 15)
print("Generated Text:")
print(generated_text)